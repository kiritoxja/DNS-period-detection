#使用高斯混合模型和T检验进行过滤
import numpy as np
from sklearn.mixture import  GaussianMixture
from scipy import stats

def filt(candidatePeriods:list,intervalList:list):
    #首先对候选周期进行GMM拟合 将bic值最低的最为最佳
    intervalList = np.array(intervalList).reshape(-1,1)
    lowest_bic = np.infty
    for n_components in [1, 2, 3]:
        gmm =  GaussianMixture(n_components = n_components)
        gmm.fit(intervalList)
        if gmm.bic(intervalList) < lowest_bic:
            best_gmm =gmm
    #按分量数量对间隔进行分组
    intervals = []
    if best_gmm.n_components == 1:
        intervals.append(intervalList)
    else:
        for i in range(best_gmm.n_components):
            intervals.append([])
        meansList = best_gmm.means_.reshape(best_gmm.means_.size).tolist()
        for j in intervalList:
            diffList = [abs(j[0]-i) for i in meansList]
            minIndex = diffList.index(min(diffList))
            intervals[minIndex].append(j[0])

    result = []
    #开始T检验
    for candidatePeriod in candidatePeriods:
        for intervalGroup in intervals:
            if stats.ttest_1samp(intervalGroup, candidatePeriod).pvalue >=0.05:
                result.append(candidatePeriod)
                break

    return result

if __name__ == '__main__':
    # intervalList ='88102772 1023523853 1022120261 89029103 2222086451 1110913592 1110868233 1110977065 1110836120 1112261971 1115293877 1113049470 1112551311 1112727292 1112943223 1112355754 1025097526 87283683 2224860078 1112876181 1112284256 1111997508 1112006656 1112742874 1112524677 1113116360 1113151248 1110891827 1111839954 1022509658 89298500 1021560009 2310571752 1110293531 1110960587 1110706401 1110896308 1110795139 1110747241 1111349889 1110914281 1111077740 1110958170 1021198826 89611789 2220759213 1110788969 1111134966 1111719178 1111480377 1112103445 1112815358 1112435111 1111531842 1110667356 1110888029 1021595848 88939883 1021868438 2310933088'
    # intervalList = [int(i)/1000000 for i in intervalList.split(' ')]
    # candidatePeriods = '65584 118 177 236 295 354 413 472 531 590 649 708 767 826 885 944 1003 1062 1121 1180 1239 1298 1299 1357 1358 1416 1417 1474 1475 1476 1533 1534 1535 1592 1593 1594 1652 1653 1711 1712 1770 1771 1829 1830 1888 1889 1947 1948 2006 2007 2065 2066 2123 2124 2125 2182 2183 2184 2241 2242 2243 2300 2301 2302 2361 2420 2479 2538 2593 2597 2652 2656 2711 2715 2770 2774 2833 2892 2951 3010 3069 3128 3187 3242 3246 3301 3305 3360 3364 3419 3423 3478 3482 3537 3541 3542 3596 3600 3601 3655 3659 3660 3718 3719 3777 3778 3836 3837 3891 3895 3896 3950 3955 4009 4068 4127 4186 4245 4250 4304 4309 4311 4363 4368 4370 4427 4429 4486 4545 4604 4663 4722 4958 5017 5019 5076 5078 5135 5137 5194 5196 5253 5312 5371 5423 5430 5482 5843 5846 5902 5905 5961 5964 6020 6436 6495 6552 6554 6611 6613 6670 6672 6729 6731 6790 6849 7085 7144 7203 7262 7319 7321 7378 7380 7437 7439 7498 7546 7557 7605 7616 7675 7734 7793 7852 7911 7970 8029 8088 8089 8147 8206 8265 8324 8383 8620 8679 8738 8797 8856 8915 8974 9033 9269 9328 9387 9446 9505 9564 9623 9682 9741 9800 9859 9918 9977 10036 10095 10154 10213 10272 10331 10390 10449 10508 10567 10981 11040 11099 11158 11217 11614 11689 11748 11807 11866 11925 11984 12145 12204 12263 12322 12381 12440 12456 12515 12574 12633 12692 12912 12971 13030 13089 13224 13283 13342 13932 13991 14050 14109 51475 51534 51593 51652 52242 52301 52360 52495 52554 52613 52672 52892 52951 53010 53069 53128 53144 53203 53262 53321 53380 53439 53600 53659 53718 53777 53836 53895 53970 54367 54426 54485 54544 54603 55017 55076 55135 55194 55253 55312 55371 55430 55489 55548 55607 55666 55725 55784 55843 55902 55961 56020 56079 56138 56197 56256 56315 56551 56610 56669 56728 56787 56846 56905 56964 57201 57260 57319 57378 57437 57495 57496 57555 57614 57673 57732 57791 57850 57909 57968 57979 58027 58038 58086 58145 58147 58204 58206 58263 58265 58322 58381 58440 58499 58735 58794 58853 58855 58912 58914 58971 58973 59030 59032 59089 59148 59564 59620 59623 59679 59682 59738 59741 60102 60154 60161 60213 60272 60331 60388 60390 60447 60449 60506 60508 60565 60567 60626 60862 60921 60980 61039 61098 61155 61157 61214 61216 61221 61273 61275 61280 61334 61339 61398 61457 61516 61575 61629 61634 61688 61689 61693 61747 61748 61806 61807 61865 61866 61924 61925 61929 61983 61984 61988 62042 62043 62047 62102 62106 62161 62165 62220 62224 62279 62283 62338 62342 62397 62456 62515 62574 62633 62692 62751 62810 62814 62869 62873 62928 62932 62987 62991 63046 63105 63164 63223 63282 63283 63284 63341 63342 63343 63400 63401 63402 63459 63460 63461 63518 63519 63577 63578 63636 63637 63695 63696 63754 63755 63813 63814 63872 63873 63931 63932 63990 63991 63992 64049 64050 64051 64108 64109 64110 64167 64168 64226 64227 64285 64286 64345 64404 64463 64522 64581 64640 64699 64758 64817 64876 64935 64994 65053 65112 65171 65230 65289 65348 65407 65466 65525'
    # candidatePeriods = [int(i) for i in candidatePeriods.split(' ')]
    # print(filt(candidatePeriods,intervalList))
    import os
    baseDir = os.path.dirname(os.getcwd())
    count = 0
    with open(os.path.join(baseDir, 'processedData', 'FFT_originData.txt')) as intervalRead:
        with open(os.path.join(baseDir, 'processedData', 'FFT_fliter.txt')) as candidateRead:
            with open(os.path.join(baseDir, 'processedData', 'FFT_GaussFilt.txt'), 'w') as fwrite:
                for line1, line2 in zip(intervalRead.readlines(), candidateRead.readlines()):
                    info1 = line1.split(' ')
                    info2 = line2[:-2].split(' ')
                    host = info1[0]
                    domain = info1[1]
                    intervalList = [int(i)/1000000 for i in info1[2:]]
                    candidatePeriods = [int(i) for i in info2[2:]]
                    result = filt(candidatePeriods, intervalList)
                    if(len(result) == 0):
                        continue
                    writeStr = host + ' ' + domain + ' '
                    writeStr += ' '.join([str(i) for i in result])
                    writeStr += '\n'
                    fwrite.write(writeStr)
                    count += 1
                    print(str(count)+'/436')